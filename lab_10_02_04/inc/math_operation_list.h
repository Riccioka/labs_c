#ifndef _MATH_OPERATION_LIST_H
#define _MATH_OPERATION_LIST_H

#include <math.h>

#include "struct_list.h"
#include "read_action_and_num.h"
#include "simple_num.h"
#include "memory.h"
#include "errors.h"

int translate_list_in_num(node_t *list, int *num);
//перевод списка в число
//принимает на вход указатели на список и число
//возвращает код ошибки
//(пока список != NULL, умножаем число num на число list->data в степени list->degree)

int translate_num_in_list(node_t **list, int num);
//перевод числа в список
//принимает на вход указатели на список и число
//возвращает код ошибки
//(в цикле while(num) ищем простое число функцией get_simple_num, делим на него число num пока делится нацело,
//запоминаем частное и кол-во таких делений каждый раз, и добавляем их в список с помощью list_push_front)

int multiply_lists(node_t **result, node_t *list_1, node_t *list_2);
//умножение двух чисел
//принимает на вход указатели на результат и два числа (в формате списка)
//возвращает код ошибки
//(ищет больший элемент из двух списков и добавляет его в результат, если элементы равны - то суммирует их степени
//перед записью в результат. если один из списков заканчивается - добавляет в результат оставшиеся элементы второго)

int divide_lists(node_t **result, node_t *list_1, node_t *list_2);
//деление без остатка двух чисел
//принимает на вход указатели на результат и два числа (в формате списка)
//возвращает код ошибки
//(представляет списки в виде чисел с помощью функции translate_list_in_num, затем осуществляет деление чисел
//и результат записывает в формате списка с помощью translate_num_in_list)

int sqr_list(node_t **result, node_t *list);
//возведение числа в квадрат
//принимает на вход указатели на результат и число (в формате списка)
//возвращает код ошибки
//(осуществляет умножение числа на само себя с помощью функции multiply_lists)

#endif